name: Deploy to EKS

on:
  push:
    branches: [ prod, dev ]
  pull_request:
    branches: [ dev ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: task-management-cluster
  ECR_REPOSITORY: task-management
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Set up test environment
      run: |
        export DATABASE_URL="postgresql://testuser:testpass@localhost:5432/testdb"
        export REDIS_URL="redis://localhost:6379/0"
        export SECRET_KEY="test-secret-key"
    
    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Run security checks
      run: |
        pip install safety bandit
        safety check
        bandit -r app/
    
    - name: Run linting
      run: |
        pip install flake8 black mypy
        flake8 app/
        black --check app/
        mypy app/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push image
        docker buildx build \
          --target production \
          --platform linux/amd64 \
          --push \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          .
    
    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
    
    - name: Update kube config
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
    
    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'task-management-prod' || 'task-management' }}
      run: |
        # Set the image in deployment
        sed -i "s|image: task-management:latest|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s/fastapi-deployment.yaml
        
        # Deploy to appropriate namespace
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml -n $NAMESPACE
        kubectl apply -f k8s/storage-class.yaml
        kubectl apply -f k8s/postgres-statefulset.yaml -n $NAMESPACE
        kubectl apply -f k8s/redis-config.yaml -n $NAMESPACE
        kubectl apply -f k8s/redis-statefulset.yaml -n $NAMESPACE
        kubectl apply -f k8s/fastapi-deployment.yaml -n $NAMESPACE
        
        # Wait for deployment
        kubectl rollout status deployment/task-management-api -n $NAMESPACE --timeout=300s
    
    - name: Run database migrations
      env:
        NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'task-management-prod' || 'task-management' }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create migration job
        cat <<EOF | kubectl apply -f -
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: db-migration-$(date +%s)
          namespace: $NAMESPACE
        spec:
          template:
            spec:
              containers:
              - name: migration
                image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                command: ["alembic", "upgrade", "head"]
                envFrom:
                - configMapRef:
                    name: task-management-config
                env:
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: task-management-secrets
                      key: DATABASE_USER
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: task-management-secrets
                      key: DATABASE_PASSWORD
                - name: DATABASE_URL
                  value: "postgresql://\$(DATABASE_USER):\$(DATABASE_PASSWORD)@\$(DATABASE_HOST):\$(DATABASE_PORT)/\$(DATABASE_NAME)"
              restartPolicy: Never
          backoffLimit: 3
        EOF
    
    - name: Get deployment status
      env:
        NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'task-management-prod' || 'task-management' }}
      run: |
        echo "Deployment completed successfully!"
        echo "Namespace: $NAMESPACE"
        kubectl get pods,svc,ingress -n $NAMESPACE
        
        # Get load balancer URL
        LB_URL=$(kubectl get ingress task-management-ingress -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Not available yet")
        echo "Load Balancer URL: $LB_URL"
    
    # - name: Notify deployment status
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     channel: '#deployments'
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
    #     fields: repo,message,commit,author,action,eventName,ref,workflow
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}